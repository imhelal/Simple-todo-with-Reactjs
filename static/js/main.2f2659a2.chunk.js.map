{"version":3,"sources":["components/TodoList.jsx","components/Todo.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoList","props","text","className","aria-hidden","onClick","onSelect","id","Todo","useState","inputItem","setInputItem","items","setItems","deleteItem","olditems","filter","arrElements","index","type","value","placeholder","onChange","event","target","disabled","map","item","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8MAgBeA,EAdE,SAAAC,GAEb,OACA,4BACKA,EAAMC,KACP,uBAAGC,UAAU,cAAcC,cAAY,OAAOC,QAAS,WACnDJ,EAAMK,SAASL,EAAMM,SCsClBC,EA5CF,WAAK,IAAD,EACoBC,mBAAS,IAD7B,mBACNC,EADM,KACIC,EADJ,OAEYF,mBAAS,IAFrB,mBAENG,EAFM,KAEAC,EAFA,KAUPC,EAAa,SAAAP,GACfM,GAAS,SAACE,GACN,OAAOA,EAASC,QAAO,SAACC,EAAYC,GAChC,OAAOA,GAASX,SAI5B,OACI,oCACI,yBAAKJ,UAAU,eACX,yBAAKA,UAAU,OACX,yCAEA,yBAAKA,UAAU,YACX,8BACA,2BAAOgB,KAAK,OAAOC,MAAOV,EAAWW,YAAY,WAAWC,SAtB5D,SAACC,GACjBZ,EAAaY,EAAMC,OAAOJ,UAsBV,4BAAQK,UAAWf,EAAWL,QApB9B,WAChBQ,EAAS,GAAD,mBAAKD,GAAL,CAAWF,KACnBC,EAAa,MAkBG,cAIJ,yBAAKR,UAAU,cACX,4BACKS,EAAMc,KAAI,SAACC,EAAKT,GACb,OAAO,kBAAC,EAAD,CAAUhB,KAAMyB,EAAMrB,SAAUQ,EAAYP,GAAIW,aCvBxEU,MARf,WACE,OACE,yBAAKzB,UAAU,QACb,kBAAC,EAAD,QCKc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2f2659a2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst TodoList = props=>{\r\n    \r\n    return (\r\n    <li>\r\n        {props.text} \r\n        <i className=\"fa fa-trash\" aria-hidden=\"true\" onClick={()=>{\r\n            props.onSelect(props.id)\r\n        }}></i>\r\n\r\n    </li>\r\n    )\r\n}\r\n\r\n\r\nexport default TodoList","import React,{useState} from 'react'\r\nimport TodoList from './TodoList'\r\nconst Todo = ()=>{\r\n    const [inputItem,setInputItem] = useState('')\r\n    const [items,setItems] = useState([])\r\n    const handleInput = (event)=>{\r\n        setInputItem(event.target.value)\r\n    }\r\n    const handleItems = ()=>{\r\n        setItems([...items,inputItem])\r\n        setInputItem('')\r\n    }\r\n    const deleteItem = id=>{\r\n        setItems((olditems)=>{\r\n            return olditems.filter((arrElements,index)=>{\r\n                return index != id\r\n            })\r\n        })\r\n    }\r\n    return (\r\n        <>\r\n            <div className='app-wrapper'>\r\n                <div className='app'>\r\n                    <h1>ToDo List</h1>\r\n\r\n                    <div className='todo-box'>\r\n                        <form>\r\n                        <input type=\"text\" value={inputItem} placeholder='Add Todo' onChange={handleInput}/>\r\n                        <button disabled={!inputItem} onClick={handleItems}>Add ToDo</button>\r\n                        </form>\r\n                    </div>\r\n\r\n                    <div className='todo-lists'>\r\n                        <ul>\r\n                            {items.map((item,index)=>{\r\n                                return <TodoList text={item} onSelect={deleteItem} id={index}/>\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Todo","import React from 'react';\nimport './App.css';\nimport Todo from './components/Todo'\n\nfunction App() {\n  return (\n    <div className=\"body\">\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}